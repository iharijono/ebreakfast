# coding: utf-8
# generated by: sqlacodegen mysql+pymysql://root:root@localhost/ebreakfast_db --outfile models.py
#
from sqlalchemy import Column, Date, Float, ForeignKey, String, Table, text, create_engine
from sqlalchemy.dialects.mysql import INTEGER
from sqlalchemy.orm import relationship
# from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import declarative_base
from sqlalchemy import select, insert
from sqlalchemy.orm import Session

import os
import dataclasses
from typing import Any, Dict
from pathlib import Path
import yaml

Base = declarative_base()
metadata = Base.metadata


class Address(Base):
    __tablename__ = 'addresses'

    id = Column(INTEGER(11), primary_key=True)
    street = Column(String(80), nullable=False)
    city = Column(String(20), nullable=False)
    zip = Column(String(20), nullable=False)
    country = Column(String(80), server_default=text("'United States'"))


class Creditcard(Base):
    __tablename__ = 'creditcards'

    id = Column(String(80), primary_key=True)
    numbers = Column(String(80), nullable=False)
    zip = Column(String(20), nullable=False)

    customers = relationship('Customer', secondary='paymentmethods')


class Merchant(Base):
    __tablename__ = 'merchants'

    id = Column(String(20), primary_key=True)
    email = Column(String(20))
    phone = Column(String(20))
    tax_id = Column(String(20))

class Admin(Base):
    __tablename__ = 'admins'

    id = Column(String(20), primary_key=True)
    email = Column(String(20))
    phone = Column(String(20))
    password = Column(String(80))


class Customer(Base):
    __tablename__ = 'customers'

    id = Column(String(20), primary_key=True)
    email = Column(String(20))
    phone = Column(String(20))
    password = Column(String(80))
    birthdate = Column(Date)
    address_fk = Column(ForeignKey('addresses.id', ondelete='CASCADE'), nullable=False, index=True)

    address = relationship('Address')


class Restaurant(Base):
    __tablename__ = 'restaurants'

    id = Column(String(20), primary_key=True)
    email = Column(String(20))
    phone = Column(String(20))
    merchant_fk = Column(ForeignKey('merchants.id', ondelete='CASCADE'), nullable=False, index=True)

    merchant = relationship('Merchant')


class Meal(Base):
    __tablename__ = 'meals'

    id = Column(String(20), primary_key=True)
    descr = Column(String(80))
    price = Column(Float(5, True))
    restaurant_fk = Column(ForeignKey('restaurants.id', ondelete='CASCADE'), nullable=False, index=True)

    restaurant = relationship('Restaurant')
    orders = relationship('Order', secondary='ordermeals')
    def __repr__(self):
        output = ''
        for c in self.__table__.columns:
            output += '{}: {}\n'.format(c.name, getattr(self, c.name))
        return output

class Order(Base):
    __tablename__ = 'orders'

    id = Column(INTEGER(11), primary_key=True)
    customer_fk = Column(ForeignKey('customers.id', ondelete='CASCADE'), nullable=False, index=True)

    customer = relationship('Customer')


t_paymentmethods = Table(
    'paymentmethods', metadata,
    Column('customer_fk', ForeignKey('customers.id', ondelete='CASCADE'), nullable=False, index=True),
    Column('creditcard_fk', ForeignKey('creditcards.id', ondelete='CASCADE'), nullable=False, index=True)
)


t_ordermeals = Table(
    'ordermeals', metadata,
    Column('order_fk', ForeignKey('orders.id', ondelete='CASCADE'), nullable=False, index=True),
    Column("quantity", INTEGER),
    Column('meal_fk', ForeignKey('meals.id', ondelete='CASCADE'), nullable=False, index=True)
)

engine = None
def myengine():
    global engine
    if engine is None:
        MYSQL_HOST=os.environ.get("MYSQL_HOST", "db")
        print(f'MYSQL_HOST = {MYSQL_HOST}')

        MYSQL_USER=os.environ.get("MYSQL_USER", "root")
        MYSQL_PWD=os.environ.get("MYSQL_PWD", "root")
        MYSQL_DB=os.environ.get("MYSQL_DB", "ebreakfast_db")
        MYSQL_ECHO=os.environ.get("MYSQL_ECHO", "False").lower() in ["true", "yes", "1"]
        engine = create_engine(f"mysql+pymysql://{MYSQL_USER}:{MYSQL_PWD}@{MYSQL_HOST}/{MYSQL_DB}", future=True, echo=MYSQL_ECHO)
        print(f'ENGINE: mysql+pymysql://{MYSQL_USER}:{MYSQL_PWD}@{MYSQL_HOST}/{MYSQL_DB}')
        
    return engine

@dataclasses.dataclass
class Menu:
    markdown: str
    title: str
    description: str
    image_url: str
    price: str

menu_db = {}
def get_price(name):
    # print(f'get_price name = {name}')
    if menu_db:
        for k, v in menu_db.items():
            # print(f'get_price name = {name} == {k}')
            if k == name:
                return v.price
    return None

def get_menus(merchant):
    global menu_db
    HERE = Path(__file__)
    session = Session(myengine())
    stmt = select(Meal).where(Meal.restaurant_fk == "ebreakfast")
    menus: Dict[str, Menu] = {}
    for meal in session.execute(stmt):
        m = meal._asdict()['Meal']
        p_str = "%.2f" % m.price
        m.price = p_str
        menu_db[m.id] = m
        # print(f'MEAL -> {m}')

    for file in (HERE.parent.parent / "content/menus").glob("*.md"):
        content = file.read_text()
        lines = [k.strip() for k in content.split("\n")]
        frontmatter_start = lines.index("---", 0)
        frontmatter_end = lines.index("---", frontmatter_start + 1)
        yamltext = "\n".join(lines[frontmatter_start + 1 : frontmatter_end - 2])
        metadata = yaml.safe_load(yamltext)
        markdown = "\n".join(lines[frontmatter_end + 1 :])
        stem = file.stem
        price = get_price(stem)
        # print(f'PRICE = {price}')
        menus[stem] = Menu(markdown=markdown, 
                                title=metadata["title"], 
                                description=metadata["description"], 
                                price=price if price else metadata["price"],
                                image_url=metadata["image"])
    return menus

def create_ordermeals(uid, meals):
    # ORDER
    o = Order(customer_fk=uid)
    OID = None
    en = myengine()
    with Session(en) as session:
        session.add(o)
        session.commit()
        OID = o.id
    print(f'OID = {OID}, meals = {meals}')
    for m in meals:
        quantity = m['quantity']
        meal_fk = m['meal_id']
        stmt = insert(t_ordermeals).values(order_fk=OID, quantity=quantity,     meal_fk=meal_fk)
        with en.connect() as conn:
            result = conn.execute(stmt)
            conn.commit()
    return OID 

if __name__ == '__main__':
    from sqlalchemy.orm import Session
    OID = None
    # engine = create_engine("mysql+pymysql://root:root@localhost/ebreakfast_db", echo=True, future=True)
    engine = myengine()
    stmt = select(Meal).where(Meal.restaurant_fk == "ebreakfast")
    with Session(engine) as session:
        # add1 = Address(street='street1011', city='city101', zip='55555')
        # cc1 = Creditcard(id='cc11112', numbers='444444444444444', zip='44444')
        # session.add(add1)
        # session.commit()  
        # session.add(cc1)
        # print(f'---> {add1.id}')
        # cust1 = Customer(id='cust11111', email='cust1@example.com', phone='3333333333', birthdate='2000-7-07', address_fk=add1.id)
        # session.add(cust1)
        # session.commit()
        
        for meal in session.execute(stmt):
            m = meal._asdict()['Meal']
            p_str = "%.2f" % m.price
            m.price = float(p_str)
            menu_db[m.id] = m
            # print(f'MEAL -> {m}')
        
        # for meal in session.execute(stmt):
        #     m = meal._asdict()['Meal']
        #     print(f'MEAL -> {m}')

        # print(f'menu_db = {menu_db}')
        
        p = get_price('coffee')
        print(f'price = {p}')
        
        # ORDER
        customer_id = 'test'
        o = Order(customer_fk=customer_id)
        session.add(o)
        # session.flush()
        session.commit()
        # session.refresh(o)
        OID = o.id
        # print(f'NEW ID = {OID}')
        
    print(f'NEW ID = {OID}')    
    meal_ids = ['burger', 'pancake', 'pizza']
    for m in meal_ids:
        stmt = insert(t_ordermeals).values(order_fk=OID, quantity=3, meal_fk=m)
        en = myengine()
        with en.connect() as conn:
            result = conn.execute(stmt)
            conn.commit()    
        